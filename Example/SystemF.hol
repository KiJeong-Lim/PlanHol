module SystemF where

data Typ : * where
    TyAll : (Typ -> Typ) -> Typ
    TyArr : Typ -> Typ -> Typ
    deriving (Copy)

data Trm : * where
    App : Trm -> Trm -> Trm
    Lam : (Trm -> Trm) -> Trm
    TApp : Trm -> Typ -> Trm
    TLam : (Typ -> Trm) -> Trm
    deriving (Copy)

typCheck : i:Trm -> o:Typ -> Prop
typCheck (App t1 t2) tau :- typCheck t1 (TyArr sigma tau) && typCheck t2 sigma
typCheck (Lam t1) (TyArr sigma tau) :- forall x. typCheck x sigma => typCheck (t1 x) tau
typCheck (TApp t1 ty) tau :- typCheck t1 (TyAll sigma) && subst sigma ty tau
typCheck (TLam t1) (TyAll sigma) :- forall alpha. copy alpha alpha => typCheck t1 (sigma alpha)
